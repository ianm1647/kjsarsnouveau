plugins {
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'net.neoforged.moddev' version '2.0.110'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }


    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
        content {
            includeGroup "org.parchmentmc.data"
        }
    }

    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }

    maven {
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.rtyley"
        }
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        url "https://maven.architectury.dev/"
        content {
            includeGroup "dev.architectury"
        }
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()

            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {

    api "dev.latvian.mods:kubejs-neoforge:$kubejs_version"
    implementation "dev.latvian.mods:rhino:$rhino_version"
    implementation "dev.architectury:architectury-neoforge:$architectury_version"

    implementation "curse.maven:ars-nouveau-401955:$arsnouveau_version"
    implementation "curse.maven:curios-309927:$curios_version"
    implementation "curse.maven:geckolib-388172:$geckolib_version"

    implementation "curse.maven:jei-238222:6614392"
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [minecraft_version       : minecraft_version,
                             minecraft_version_range : minecraft_version_range,
                             neo_version             : neo_version,
                             neo_version_range       : neo_version_range,
                             loader_version_range    : loader_version_range,
                             mod_id                  : mod_id,
                             mod_name                : mod_name,
                             mod_license             : mod_license,
                             mod_version             : mod_version,
                             mod_authors             : mod_authors,
                             mod_description         : mod_description,
                             kubejs_version          : kubejs_version,
                             arsnouveau_version_range: arsnouveau_version_range
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
